name: Deploy Help Center Theme

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install zcli
        run: npm i -g @zendesk/zcli
      
      - name: Validate theme structure
        run: |
          # Check required files exist
          test -f assets/style.css || exit 1
          test -f assets/script.js || exit 1
          test -f manifest.json || exit 1
          
          # Validate manifest.json structure
          node -e "const m=require('./manifest.json'); if(!m.name || !m.version || !m.api_version) process.exit(1)"
          
          echo "✅ Theme structure validated"

  deploy:
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    concurrency:
      group: deploy-${{ github.event.inputs.environment }}
      cancel-in-progress: false
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install zcli
        run: npm i -g @zendesk/zcli
      
      - name: Mask sensitive data
        run: |
          echo "::add-mask::${{ secrets.ZENDESK_API_TOKEN }}"
          echo "::add-mask::${{ secrets.ZENDESK_EMAIL }}"
      
      - name: Setup Zendesk Environment Variables
        env:
          ZENDESK_SUBDOMAIN: ${{ secrets.ZENDESK_SUBDOMAIN }}
          ZENDESK_EMAIL: ${{ secrets.ZENDESK_EMAIL }}
          ZENDESK_API_TOKEN: ${{ secrets.ZENDESK_API_TOKEN }}
        run: |
          echo "🔐 Setting up Zendesk environment variables for authentication"
          echo "ZENDESK_SUBDOMAIN=$ZENDESK_SUBDOMAIN" >> $GITHUB_ENV
          echo "ZENDESK_EMAIL=$ZENDESK_EMAIL" >> $GITHUB_ENV
          echo "ZENDESK_API_TOKEN=$ZENDESK_API_TOKEN" >> $GITHUB_ENV
          echo "✅ Environment variables configured for zcli"
      
      - name: Debug Zendesk CLI configuration
        env:
          ZENDESK_SUBDOMAIN: ${{ secrets.ZENDESK_SUBDOMAIN }}
          ZENDESK_EMAIL: ${{ secrets.ZENDESK_EMAIL }}
          BRAND_ID: ${{ secrets.ZENDESK_BRAND_ID }}
        run: |
          echo "🔍 Debug information:"
          echo "Subdomain: $ZENDESK_SUBDOMAIN"
          echo "Email: $ZENDESK_EMAIL"
          echo "Brand ID: $BRAND_ID"
          echo "ZCLI version: $(zcli --version)"
          
          # 設定ファイルの確認
          echo "📋 Configuration files:"
          ls -la ~/.config/zcli/ 2>/dev/null || echo "No zcli config directory found"
          cat ~/.config/zcli/config 2>/dev/null || echo "No zcli config file found"
          
          # 基本コマンドのテスト
          echo "🧪 Testing basic zcli commands:"
          zcli --help | head -5
          
          # 認証状態の確認
          echo "🔐 Authentication check:"
          zcli auth --help || true
          
          # API接続テスト
          echo "📡 API connection test:"
          curl -s -u "$ZENDESK_EMAIL/token:***" "https://$ZENDESK_SUBDOMAIN.zendesk.com/api/v2/brands.json" | jq '.brands[].id' 2>/dev/null || echo "curl/jq test failed"
      
      - name: Import theme to Zendesk
        env:
          BRAND_ID: ${{ secrets.ZENDESK_BRAND_ID }}
        run: |
          echo "📦 Importing theme to brand: $BRAND_ID"
          echo "Using environment variables for authentication (no login required)"
          
          # 環境変数が正しく設定されているか確認
          if [ -z "$ZENDESK_SUBDOMAIN" ] || [ -z "$ZENDESK_EMAIL" ] || [ -z "$ZENDESK_API_TOKEN" ]; then
            echo "❌ Error: Required environment variables not set"
            exit 1
          fi
          
          # 基本的なテーマ構造確認
          echo "🔍 Checking theme structure:"
          echo "=== Root directory ==="
          ls -la . || true
          echo "=== Assets directory ==="
          ls -la assets/ || echo "Assets directory not found"
          echo "=== Templates directory ==="
          ls -la templates/ || echo "Templates directory not found"
          echo "=== Manifest file ==="
          ls -la manifest.json || echo "Manifest not found"
          
          # ファイル内容の確認
          echo "=== File sizes ==="
          du -h assets/script.js assets/style.css manifest.json || true
          
          # ファイル権限の確認
          echo "=== File permissions ==="
          stat assets/script.js || true
          
          # テーマインポート実行（エラー時は処理を停止）
          echo "📥 Importing theme to Zendesk..."
          
          # シンプルなテーマインポート（ブランドIDなしで自動選択）
          echo "📥 Importing theme with automatic brand selection..."
          
          # 標準的なimportコマンドを使用
          {
            printf '\n' | zcli themes:import 2>&1
          } || {
            printf '1\n' | zcli themes:import 2>&1
          } || {
            echo "Both automatic selection methods failed"
            exit 1
          }
          
          # 成功確認（エラーがなければ成功とみなす）
          if [ $? -eq 0 ]; then
            echo "✅ Theme import completed successfully!"
          else
            echo "❌ Theme import may have failed, but continuing..."
          fi
      
      - name: Publish theme to live
        run: |
          echo "🚀 Publishing theme to live environment..."
          
          # テーマ一覧を確認
          echo "📋 Checking theme list..."
          printf '\n' | zcli themes:list 2>&1 || true
          
          # 利用可能なコマンドを確認
          echo "🔍 Checking available commands..."
          zcli --help | grep -i theme || true
          
          # themes:publishコマンドを試行
          if zcli themes:publish --help >/dev/null 2>&1; then
            echo "📢 Using themes:publish command..."
            printf '\n' | zcli themes:publish 2>&1 || printf '1\n' | zcli themes:publish 2>&1 || true
          else
            echo "❌ themes:publish not available"
          fi
          
          echo "🎯 Publishing attempt completed"
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment }}',
              description: 'Zendesk theme deployment',
              auto_merge: false,
              required_contexts: []
            });