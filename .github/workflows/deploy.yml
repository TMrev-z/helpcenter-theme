name: Deploy Guide Theme

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install required tools
        run: |
          echo "üì¶ Installing jq for JSON processing..."
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Preflight validation (Copenhagen standard structure)
        run: |
          set -e
          echo "üîç Validating theme structure (Copenhagen standard)..."
          
          # Must-have files check
          test -f "manifest.json" || { echo "‚ùå manifest.json not found at theme root"; exit 1; }
          test -f "style.css" || { echo "‚ùå style.css not found at theme root"; exit 1; }
          test -f "script.js" || { echo "‚ùå script.js not found at theme root"; exit 1; }
          test -f "templates/document_head.hbs" || { echo "‚ùå document_head.hbs not found"; exit 1; }
          
          # Reference consistency check  
          grep -q "{{asset 'style.css'}}" "templates/document_head.hbs" || { echo "‚ùå style.css reference not found in document_head.hbs"; exit 1; }
          grep -q "{{asset 'script.js'}}" "templates/document_head.hbs" || { echo "‚ùå script.js reference not found in document_head.hbs"; exit 1; }
          
          # Exclude problematic files/directories
          if find . -name "__MACOSX" -o -name ".DS_Store" -o -path "*/minimal-theme/*" -o -path "*/temp-theme/*" -o -path "*/clean-theme/*" | grep -q .; then
            echo "‚ùå Found problematic files/directories that should be removed"
            find . -name "__MACOSX" -o -name ".DS_Store" -o -path "*/minimal-theme/*" -o -path "*/temp-theme/*" -o -path "*/clean-theme/*"
            exit 1
          fi
          
          echo "‚úÖ Theme structure validation passed"
          
          # File size and content verification
          echo "üìä File verification:"
          echo "style.css: $(wc -c < style.css) bytes, $(wc -l < style.css) lines"
          echo "script.js: $(wc -c < script.js) bytes, $(wc -l < script.js) lines"
          
      - name: Manual validation (structure and content)
        run: |
          echo "üîç Manual theme validation (no ZCLI dependency)..."
          
          # Additional content validation
          echo "üìã Manifest validation:"
          jq empty manifest.json || { echo "‚ùå Invalid JSON in manifest.json"; exit 1; }
          jq -r '.name, .version, .api_version' manifest.json
          
          echo "‚úÖ Manual validation passed"

  deploy:
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    concurrency:
      group: deploy-${{ github.event.inputs.environment }}
      cancel-in-progress: false
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install required tools
        run: |
          echo "üì¶ Installing jq for JSON processing..."
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Setup Zendesk Environment Variables
        env:
          ZENDESK_SUBDOMAIN: ${{ secrets.ZENDESK_SUBDOMAIN }}
          ZENDESK_EMAIL: ${{ secrets.ZENDESK_EMAIL }}
          ZENDESK_API_TOKEN: ${{ secrets.ZENDESK_API_TOKEN }}
        run: |
          echo "üîê Setting up Zendesk environment variables for non-interactive authentication"
          echo "ZENDESK_SUBDOMAIN=$ZENDESK_SUBDOMAIN" >> $GITHUB_ENV
          echo "ZENDESK_EMAIL=$ZENDESK_EMAIL" >> $GITHUB_ENV  
          echo "ZENDESK_API_TOKEN=$ZENDESK_API_TOKEN" >> $GITHUB_ENV
          echo "‚úÖ Environment variables configured"
      
      - name: Create theme package manually
        run: |
          echo "üì¶ Creating theme package manually (ZCLI commands not available)..."
          
          # Create theme.zip manually using standard zip
          echo "üóúÔ∏è Creating ZIP package..."
          zip -r theme.zip . -x "*.git*" "node_modules/*" ".github/*" "*.zip"
          
          echo "üìä Package created:"
          ls -la theme.zip
          unzip -l theme.zip | head -20
          echo "‚úÖ Theme package ready for upload"
      
      - name: Deploy via Theming API (official workflow)
        env:
          BRAND_ID: ${{ secrets.ZENDESK_BRAND_ID }}
        run: |
          set -e
          echo "üöÄ Deploying theme via Zendesk Theming API..."
          echo "Brand ID: $BRAND_ID"
          
          # Create import job
          echo "üìã Creating theme import job..."
          JOB=$(curl -sS -u "$ZENDESK_EMAIL/token:$ZENDESK_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"job\": {\"attributes\": {\"brand_id\": \"${BRAND_ID}\", \"format\": \"zip\"}}}" \
            "https://${ZENDESK_SUBDOMAIN}.zendesk.com/api/v2/guide/theming/jobs/themes/imports")
          
          # Extract upload URL and parameters
          URL=$(echo "$JOB" | jq -r '.job.data.upload.url')
          JOB_ID=$(echo "$JOB" | jq -r '.job.id')
          
          echo "üì§ Uploading theme package..."
          echo "Job ID: $JOB_ID"
          echo "Upload URL: $URL"
          
          # Extract and prepare upload parameters safely
          echo "üîß Extracting upload parameters..."
          echo "$JOB" | jq '.job.data.upload.parameters' > /tmp/upload_params.json
          cat /tmp/upload_params.json
          
          # Use a simpler approach: create curl command with explicit parameters
          echo "üì§ Uploading theme package..."
          
          # Try direct upload with key parameters extracted individually
          KEY=$(echo "$JOB" | jq -r '.job.data.upload.parameters.key // empty')
          POLICY=$(echo "$JOB" | jq -r '.job.data.upload.parameters.policy // empty')
          SIGNATURE=$(echo "$JOB" | jq -r '.job.data.upload.parameters.signature // empty')
          CREDENTIAL=$(echo "$JOB" | jq -r '.job.data.upload.parameters."x-amz-credential" // empty')
          DATE=$(echo "$JOB" | jq -r '.job.data.upload.parameters."x-amz-date" // empty')
          ALGORITHM=$(echo "$JOB" | jq -r '.job.data.upload.parameters."x-amz-algorithm" // empty')
          
          echo "Key: $KEY"
          echo "Policy present: $([ -n "$POLICY" ] && echo "Yes" || echo "No")"
          echo "Signature present: $([ -n "$SIGNATURE" ] && echo "Yes" || echo "No")"
          
          # Upload with explicit form fields
          UPLOAD_RESULT=$(curl -sS -X POST \
            -F "key=$KEY" \
            -F "policy=$POLICY" \
            -F "x-amz-credential=$CREDENTIAL" \
            -F "x-amz-algorithm=$ALGORITHM" \
            -F "x-amz-date=$DATE" \
            -F "x-amz-signature=$SIGNATURE" \
            -F "file=@theme.zip" \
            "$URL")
          echo "Upload result: $UPLOAD_RESULT"
          
          # Poll job status until completion
          echo "‚è≥ Waiting for theme import to complete..."
          for i in $(seq 1 30); do
            STATUS_RESPONSE=$(curl -sS -u "$ZENDESK_EMAIL/token:$ZENDESK_API_TOKEN" \
              "https://${ZENDESK_SUBDOMAIN}.zendesk.com/api/v2/guide/theming/jobs/$JOB_ID")
            
            STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.job.status')
            echo "Theme import job status ($i/30): $STATUS"
            
            if [ "$STATUS" = "completed" ]; then
              echo "‚úÖ Theme import completed successfully!"
              echo "Theme imported and ready for use"
              exit 0
            fi
            
            if [ "$STATUS" = "failed" ]; then
              echo "‚ùå Theme import failed"
              echo "Error details:"
              echo "$STATUS_RESPONSE" | jq '.job.errors // "No error details available"'
              exit 1
            fi
            
            sleep 10
          done
          
          echo "‚ùå Timeout waiting for theme import job to complete"
          exit 1
      
      - name: Verify deployment
        run: |
          echo "üîç Verifying theme deployment..."
          echo "Theme deployed to: https://${ZENDESK_SUBDOMAIN}.zendesk.com/hc/admin/brand/${{ secrets.ZENDESK_BRAND_ID }}/themes"
          echo "Help Center URL: https://${ZENDESK_SUBDOMAIN}.zendesk.com/hc/"
          echo "‚úÖ Deployment verification complete"
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment }}',
              description: 'Zendesk theme deployment via Theming API',
              auto_merge: false,
              required_contexts: []
            });